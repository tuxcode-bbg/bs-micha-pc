From 26775392afe1179d28a30186093f9a5f7906ccb7 Mon Sep 17 00:00:00 2001
From: "M. Liebmann" <tuxcode.bbg@gmail.com>
Date: Sat, 19 Dec 2015 10:09:54 +0100
Subject: [PATCH] Add thread:cancel() function

---
 src/llthread.c            | 64 +++++++++++++++++++++++++++++++++++++++++++++++
 src/lua/llthreads2/ex.lua |  6 +++++
 2 files changed, 70 insertions(+)

diff --git a/src/llthread.c b/src/llthread.c
index 74784ae..d449574 100644
--- a/src/llthread.c
+++ b/src/llthread.c
@@ -486,6 +486,30 @@ static int llthread_alive(llthread_t *this) {
   }
 }
 
+static int llthread_cancel(llthread_t *this) {
+  llthread_validate(this);
+
+  if(IS(this, JOINED)){
+    return JOIN_OK;
+  } else{
+#ifndef USE_PTHREAD
+  return JOIN_FAIL;
+#else
+  int rc = pthread_cancel(this->thread);
+  if(rc == 0){
+    return JOIN_ETIMEDOUT;
+  }
+
+  if(rc != ESRCH){ 
+    /*@fixme what else it can be ?*/
+    return rc;
+  }
+
+  return JOIN_OK;
+#endif
+  }
+}
+
 static llthread_t *llthread_create(lua_State *L, const char *code, size_t code_len) {
   llthread_t *this        = llthread_new();
   llthread_child_t *child = this->child;
@@ -660,6 +684,45 @@ static int l_llthread_alive(lua_State *L) {
 
 }
 
+static int l_llthread_cancel(lua_State *L) {
+  llthread_t *this = l_llthread_at(L, 1);
+  llthread_child_t *child = this->child;
+  int rc;
+
+  if(!IS(this, STARTED )) {
+    return fail(L, "Can't cancel a thread that hasn't be started.");
+  }
+  if( IS(this, DETACHED)) {
+    return fail(L, "Can't cancel a thread that has been detached.");
+  }
+  if( IS(this, JOINED  )) {
+    return fail(L, "Can't cancel a thread that has already been joined.");
+  }
+
+  /* cancel the thread. */
+  rc = llthread_cancel(this);
+
+  if( rc == JOIN_ETIMEDOUT ){
+    lua_pushboolean(L, 1);
+    return 1;
+  }
+
+  if(rc == JOIN_OK){
+    lua_pushboolean(L, 0);
+    return 1;
+  }
+
+  {
+    char buf[ERROR_LEN];
+    strerror_r(errno, buf, ERROR_LEN);
+
+    /* llthread_cleanup_child(this); */
+
+    return fail(L, buf);
+  }
+
+}
+
 static int l_llthread_started(lua_State *L) {
   llthread_t *this = l_llthread_at(L, 1);
   lua_pushboolean(L, IS(this, STARTED)?1:0);
@@ -692,6 +755,7 @@ static const struct luaL_Reg l_llthread_meth[] = {
   {"start",         l_llthread_start         },
   {"join",          l_llthread_join          },
   {"alive",         l_llthread_alive         },
+  {"cancel",        l_llthread_cancel        },
   {"started",       l_llthread_started       },
   {"detached",      l_llthread_detached      },
   {"joinable",      l_llthread_joinable      },
diff --git a/src/lua/llthreads2/ex.lua b/src/lua/llthreads2/ex.lua
index f0c27d9..4763260 100644
--- a/src/lua/llthreads2/ex.lua
+++ b/src/lua/llthreads2/ex.lua
@@ -123,6 +123,12 @@ function thread_mt:alive()
   return self.thread:alive()
 end
 
+--- Cancel the thread
+-- 
+function thread_mt:cancel()
+  return self.thread:cancel()
+end
+
 --- Check if thread was started.
 -- 
 function thread_mt:started()
-- 
2.6.4

